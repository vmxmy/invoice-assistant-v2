# 构建阶段 - 使用与本地一致的 Node.js 版本
FROM node:24-alpine AS builder

WORKDIR /app

# 声明构建时参数
ARG VITE_SUPABASE_URL
ARG VITE_SUPABASE_ANON_KEY
ARG VITE_APP_ENV=production
ARG VITE_APP_NAME=发票助手
ARG VITE_APP_VERSION=2.0.0
ARG VITE_APP_DOMAIN=http://localhost
ARG VITE_DEBUG_MODE=false

# 设置为环境变量
ENV VITE_SUPABASE_URL=$VITE_SUPABASE_URL
ENV VITE_SUPABASE_ANON_KEY=$VITE_SUPABASE_ANON_KEY
ENV VITE_APP_ENV=$VITE_APP_ENV
ENV VITE_APP_NAME=$VITE_APP_NAME
ENV VITE_APP_VERSION=$VITE_APP_VERSION
ENV VITE_APP_DOMAIN=$VITE_APP_DOMAIN
ENV VITE_DEBUG_MODE=$VITE_DEBUG_MODE

# 复制依赖文件（优化缓存层）
COPY package*.json ./

# 安装依赖 - 使用 BuildKit 缓存挂载和优化选项
RUN --mount=type=cache,target=/root/.npm \
    npm ci --silent --only=production && \
    npm ci --silent

# 复制源代码 (排除通过 .dockerignore 指定的文件)
COPY . .

# 构建生产版本 - 使用缓存挂载
RUN --mount=type=cache,target=/root/.npm \
    npm run build

# 生产阶段
FROM nginx:alpine

# 安装curl用于健康检查
RUN apk add --no-cache curl

# 复制构建产物
COPY --from=builder /app/dist /usr/share/nginx/html

# 复制 Nginx 配置
COPY nginx.conf /etc/nginx/nginx.conf

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/ || exit 1

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]