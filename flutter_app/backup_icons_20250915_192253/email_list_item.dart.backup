/// ÈÇÆ‰ª∂ÂàóË°®È°πÁªÑ‰ª∂
/// ÊòæÁ§∫Âçï‰∏™ÈÇÆ‰ª∂ËÆ∞ÂΩïÁöÑ‰ø°ÊÅØ
library;

// MaterialÂØºÂÖ•Â∑≤ÁßªÈô§Ôºå‰ΩøÁî®Á∫ØCupertinoÊû∂ÊûÑ
import 'package:flutter/cupertino.dart';
import 'package:flutter/services.dart';
import '../../../domain/entities/email_record.dart';
import '../../../core/theme/cupertino_semantic_colors.dart';
import '../../widgets/common/status_badge.dart';

class EmailListItem extends StatelessWidget {
  final EmailRecord email;
  final VoidCallback onTap;
  final VoidCallback? onMarkAsRead;
  final VoidCallback? onDelete;
  final bool isSelected;

  const EmailListItem({
    super.key,
    required this.email,
    required this.onTap,
    this.onMarkAsRead,
    this.onDelete,
    this.isSelected = false,
  });

  @override
  Widget build(BuildContext context) {
    
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      decoration: BoxDecoration(
        color: isSelected 
          ? CupertinoColors.systemBlue.withValues(alpha: 0.1)
          : CupertinoColors.systemGrey6,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isSelected 
            ? CupertinoColors.systemBlue.withValues(alpha: 0.3)
            : CupertinoColors.separator.withValues(alpha: 0.1),
          width: isSelected ? 1.5 : 0.5,
        ),
      ),
      child: GestureDetector(
        onTap: () {
          HapticFeedback.lightImpact();
          onTap();
        },
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Â§¥ÈÉ®ÔºöÂèë‰ª∂‰∫∫ÂíåÊó•Êúü
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Expanded(
                    child: _buildSenderInfo(),
                  ),
                  const SizedBox(width: 12),
                  _buildDateInfo(),
                ],
              ),
              
              const SizedBox(height: 8),
              
              // ÈÇÆ‰ª∂‰∏ªÈ¢ò
              _buildSubjectInfo(),
              
              const SizedBox(height: 12),
              
              // Â∫ïÈÉ®ÔºöÁä∂ÊÄÅÊ†áÁ≠æÂíåÈôÑ‰ª∂‰ø°ÊÅØ
              Row(
                children: [
                  _buildCategoryBadge(),
                  const SizedBox(width: 8),
                  _buildStatusBadge(),
                  const Spacer(),
                  if (email.hasAttachments) ...[
                    _buildAttachmentInfo(),
                    const SizedBox(width: 8),
                  ],
                  _buildActionButtons(),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// ÊûÑÂª∫Âèë‰ª∂‰∫∫‰ø°ÊÅØ
  Widget _buildSenderInfo() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          email.displayFrom,
          style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
            fontSize: 16,
            fontWeight: FontWeight.w600,
            color: CupertinoColors.label,
          ),
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
        ),
        if (email.fromEmail != null && email.fromEmail != email.fromName) ...[
          const SizedBox(height: 2),
          Text(
            email.fromEmail!,
            style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 14,
              color: CupertinoColors.secondaryLabel,
            ),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ],
      ],
    );
  }

  /// ÊûÑÂª∫Êó•Êúü‰ø°ÊÅØ
  Widget _buildDateInfo() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.end,
      children: [
        Text(
          _formatDate(email.emailDate ?? email.createdAt),
          style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
            fontSize: 12,
            color: CupertinoColors.secondaryLabel,
          ),
        ),
        if (email.emailDate != null) ...[
          const SizedBox(height: 2),
          Text(
            _formatTime(email.emailDate!),
            style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 11,
              color: CupertinoColors.tertiaryLabel,
            ),
          ),
        ],
      ],
    );
  }

  /// ÊûÑÂª∫ÈÇÆ‰ª∂‰∏ªÈ¢ò
  Widget _buildSubjectInfo() {
    return Text(
      email.displaySubject,
      style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
        fontSize: 15,
        fontWeight: FontWeight.w500,
        color: CupertinoColors.label,
        height: 1.3,
      ),
      maxLines: 2,
      overflow: TextOverflow.ellipsis,
    );
  }

  /// ÊûÑÂª∫ÂàÜÁ±ªÊ†áÁ≠æ
  Widget _buildCategoryBadge() {
    final config = _getCategoryConfig(email.emailCategory);
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: config.color.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(6),
        border: Border.all(
          color: config.color.withValues(alpha: 0.3),
          width: 0.5,
        ),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            config.icon,
            style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(fontSize: 10),
          ),
          const SizedBox(width: 4),
          Text(
            config.label,
            style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 11,
              fontWeight: FontWeight.w500,
              color: config.color,
            ),
          ),
        ],
      ),
    );
  }

  /// ÊûÑÂª∫Áä∂ÊÄÅÊ†áÁ≠æ
  Widget _buildStatusBadge() {
    return StatusBadge(
      text: email.statusDisplayName,
      status: _mapToStatusBadgeStatus(email.overallStatus),
      size: StatusBadgeSize.small,
    );
  }

  /// ÊûÑÂª∫ÈôÑ‰ª∂‰ø°ÊÅØ
  Widget _buildAttachmentInfo() {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(
          CupertinoIcons.paperclip,
          size: 14,
          color: CupertinoColors.secondaryLabel,
        ),
        const SizedBox(width: 2),
        Text(
          '${email.attachmentCount}',
          style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
            fontSize: 12,
            color: CupertinoColors.secondaryLabel,
          ),
        ),
      ],
    );
  }

  /// ÊûÑÂª∫Êìç‰ΩúÊåâÈíÆ
  Widget _buildActionButtons() {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        if (onMarkAsRead != null)
          _buildActionButton(
            icon: CupertinoIcons.eye,
            onTap: onMarkAsRead!,
            color: CupertinoColors.activeBlue,
          ),
        if (onDelete != null) ...[
          const SizedBox(width: 8),
          _buildActionButton(
            icon: CupertinoIcons.delete,
            onTap: onDelete!,
            color: CupertinoColors.destructiveRed,
          ),
        ],
      ],
    );
  }

  /// ÊûÑÂª∫Âçï‰∏™Êìç‰ΩúÊåâÈíÆ
  Widget _buildActionButton({
    required IconData icon,
    required VoidCallback onTap,
    required Color color,
  }) {
    return GestureDetector(
      onTap: () {
        HapticFeedback.lightImpact();
        onTap();
      },
      child: Container(
        padding: const EdgeInsets.all(6),
        decoration: BoxDecoration(
          color: color.withValues(alpha: 0.1),
          borderRadius: BorderRadius.circular(6),
        ),
        child: Icon(
          icon,
          size: 14,
          color: color,
        ),
      ),
    );
  }

  /// Ê†ºÂºèÂåñÊó•ÊúüÊòæÁ§∫
  String _formatDate(DateTime date) {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    final emailDate = DateTime(date.year, date.month, date.day);
    
    final difference = today.difference(emailDate).inDays;
    
    if (difference == 0) {
      return '‰ªäÂ§©';
    } else if (difference == 1) {
      return 'Êò®Â§©';
    } else if (difference < 7) {
      return '$differenceÂ§©Ââç';
    } else if (difference < 30) {
      final weeks = (difference / 7).floor();
      return '$weeksÂë®Ââç';
    } else if (date.year == now.year) {
      return '${date.month}Êúà${date.day}Êó•';
    } else {
      return '${date.year}Âπ¥${date.month}Êúà${date.day}Êó•';
    }
  }

  /// Ê†ºÂºèÂåñÊó∂Èó¥ÊòæÁ§∫
  String _formatTime(DateTime date) {
    return '${date.hour.toString().padLeft(2, '0')}:${date.minute.toString().padLeft(2, '0')}';
  }

  /// Ëé∑ÂèñÂàÜÁ±ªÈÖçÁΩÆ
  ({String label, String icon, Color color}) _getCategoryConfig(String category) {
    switch (category) {
      case 'verification':
        return (
          label: 'È™åËØÅ',
          icon: 'üîê',
          color: CupertinoSemanticColors.info,
        );
      case 'invoice':
        return (
          label: 'ÂèëÁ•®',
          icon: 'üìÑ',
          color: CupertinoSemanticColors.invoice,
        );
      case 'other':
        return (
          label: 'ÂÖ∂‰ªñ',
          icon: 'üìß',
          color: CupertinoSemanticColors.systemGray,
        );
      default:
        return (
          label: 'Êú™Áü•',
          icon: '‚ùì',
          color: CupertinoSemanticColors.systemGray2,
        );
    }
  }

  /// Êò†Â∞ÑÂà∞StatusBadgeÁöÑÁä∂ÊÄÅ
  StatusBadgeStatus _mapToStatusBadgeStatus(String status) {
    switch (status) {
      case 'success':
        return StatusBadgeStatus.success;
      case 'partial_success':
        return StatusBadgeStatus.warning;
      case 'failed':
        return StatusBadgeStatus.error;
      case 'not_processed':
        return StatusBadgeStatus.neutral;
      case 'classification_only':
        return StatusBadgeStatus.info;
      default:
        return StatusBadgeStatus.neutral;
    }
  }
}