import 'dart:io';
import 'package:flutter/cupertino.dart';
import 'package:flutter/services.dart';
import '../bloc/upload_state.dart';

/// iOS风格的上传结果组件
/// 
/// 设计特点：
/// - 清晰的成功/失败状态展示
/// - 详细的文件处理结果
/// - 符合iOS设计规范的操作按钮
/// - 流畅的动画和视觉反馈
class IOSUploadResultWidget extends StatefulWidget {
  final List<UploadResult> results;
  final VoidCallback? onRetryFailed;
  final VoidCallback? onUploadMore;
  final VoidCallback? onClose;

  const IOSUploadResultWidget({
    super.key,
    required this.results,
    this.onRetryFailed,
    this.onUploadMore,
    this.onClose,
  });

  @override
  State<IOSUploadResultWidget> createState() => _IOSUploadResultWidgetState();
}

class _IOSUploadResultWidgetState extends State<IOSUploadResultWidget>
    with TickerProviderStateMixin {
  
  late AnimationController _fadeController;
  late AnimationController _bounceController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _bounceAnimation;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
  }

  void _initializeAnimations() {
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _bounceController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );

    _fadeAnimation = CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeOut,
    );

    _bounceAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _bounceController,
      curve: Curves.elasticOut,
    ));

    // 启动动画
    _fadeController.forward();
    Future.delayed(const Duration(milliseconds: 200), () {
      _bounceController.forward();
    });
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _bounceController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final successCount = widget.results.where((r) => r.success).length;
    final failedCount = widget.results.length - successCount;
    final hasFailures = failedCount > 0;

    return FadeTransition(
      opacity: _fadeAnimation,
      child: CustomScrollView(
        slivers: [
          // 结果头部
          SliverToBoxAdapter(
            child: _buildResultHeader(successCount, failedCount, hasFailures),
          ),
          
          // 统计卡片
          SliverToBoxAdapter(
            child: _buildStatsCards(successCount, failedCount),
          ),
          
          // 文件结果列表
          SliverToBoxAdapter(
            child: _buildResultsList(),
          ),
          
          // 操作按钮
          SliverToBoxAdapter(
            child: _buildActionButtons(hasFailures),
          ),
          
          // 底部间距
          const SliverToBoxAdapter(
            child: SizedBox(height: 32),
          ),
        ],
      ),
    );
  }

  Widget _buildResultHeader(int successCount, int failedCount, bool hasFailures) {
    return Padding(
      padding: const EdgeInsets.fromLTRB(20, 24, 20, 24),
      child: Column(
        children: [
          // 状态图标
          AnimatedBuilder(
            animation: _bounceAnimation,
            builder: (context, child) {
              return Transform.scale(
                scale: _bounceAnimation.value,
                child: Container(
                  width: 80,
                  height: 80,
                  decoration: BoxDecoration(
                    color: hasFailures
                        ? CupertinoColors.systemOrange.withValues(alpha: 0.1)
                        : CupertinoColors.systemGreen.withValues(alpha: 0.1),
                    shape: BoxShape.circle,
                  ),
                  child: Icon(
                    hasFailures
                        ? CupertinoIcons.exclamationmark_triangle_fill
                        : CupertinoIcons.checkmark_circle_fill,
                    size: 40,
                    color: hasFailures
                        ? CupertinoColors.systemOrange
                        : CupertinoColors.systemGreen,
                  ),
                ),
              );
            },
          ),
          
          const SizedBox(height: 20),
          
          // 主标题
          Text(
            hasFailures ? '部分上传完成' : '上传完成',
            style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 24,
              fontWeight: FontWeight.w700,
              color: CupertinoColors.label,
            ),
          ),
          
          const SizedBox(height: 8),
          
          // 副标题
          Text(
            _buildSummaryText(successCount, failedCount),
            textAlign: TextAlign.center,
            style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 16,
              color: CupertinoColors.secondaryLabel,
              height: 1.4,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatsCards(int successCount, int failedCount) {
    return Padding(
      padding: const EdgeInsets.fromLTRB(20, 0, 20, 24),
      child: Row(
        children: [
          // 成功统计卡片
          Expanded(
            child: _buildStatCard(
              title: '成功',
              count: successCount,
              icon: CupertinoIcons.checkmark_circle_fill,
              color: CupertinoColors.systemGreen,
            ),
          ),
          
          const SizedBox(width: 12),
          
          // 失败统计卡片
          Expanded(
            child: _buildStatCard(
              title: '失败',
              count: failedCount,
              icon: CupertinoIcons.xmark_circle_fill,
              color: CupertinoColors.systemRed,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatCard({
    required String title,
    required int count,
    required IconData icon,
    required Color color,
  }) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: CupertinoColors.systemBackground,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: CupertinoColors.systemGrey.withValues(alpha: 0.1),
            offset: const Offset(0, 1),
            blurRadius: 8,
            spreadRadius: 0,
          ),
        ],
      ),
      child: Column(
        children: [
          Icon(
            icon,
            size: 32,
            color: color,
          ),
          
          const SizedBox(height: 8),
          
          Text(
            count.toString(),
            style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 24,
              fontWeight: FontWeight.w700,
              color: color,
            ),
          ),
          
          const SizedBox(height: 4),
          
          Text(
            title,
            style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 14,
              fontWeight: FontWeight.w500,
              color: CupertinoColors.secondaryLabel,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildResultsList() {
    return Padding(
      padding: const EdgeInsets.fromLTRB(20, 0, 20, 24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            '文件详情',
            style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 20,
              fontWeight: FontWeight.w600,
              color: CupertinoColors.label,
            ),
          ),
          
          const SizedBox(height: 16),
          
          Container(
            decoration: BoxDecoration(
              color: CupertinoColors.systemBackground,
              borderRadius: BorderRadius.circular(12),
              boxShadow: [
                BoxShadow(
                  color: CupertinoColors.systemGrey.withValues(alpha: 0.1),
                  offset: const Offset(0, 1),
                  blurRadius: 8,
                  spreadRadius: 0,
                ),
              ],
            ),
            child: Column(
              children: [
                for (int i = 0; i < widget.results.length; i++) ...[
                  _buildResultItem(widget.results[i]),
                  if (i < widget.results.length - 1)
                    Container(
                      height: 0.5,
                      color: CupertinoColors.separator,
                      margin: const EdgeInsets.only(left: 60),
                    ),
                ],
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildResultItem(UploadResult result) {
    final isImage = _isImageFile(result.file.path);

    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          Row(
            children: [
              // 文件图标
              Container(
                width: 44,
                height: 44,
                decoration: BoxDecoration(
                  color: result.success
                      ? CupertinoColors.systemGreen.withValues(alpha: 0.1)
                      : CupertinoColors.systemRed.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(10),
                ),
                child: Icon(
                  result.success
                      ? (isImage ? CupertinoIcons.photo_fill : CupertinoIcons.doc_text_fill)
                      : CupertinoIcons.xmark_circle_fill,
                  size: 22,
                  color: result.success
                      ? (isImage ? CupertinoColors.systemGreen : CupertinoColors.systemBlue)
                      : CupertinoColors.systemRed,
                ),
              ),
              
              const SizedBox(width: 12),
              
              // 文件信息
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      result.fileName,
                      style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 16,
                        fontWeight: FontWeight.w500,
                        color: CupertinoColors.label,
                      ),
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                    ),
                    
                    const SizedBox(height: 2),
                    
                    Row(
                      children: [
                        Text(
                          _formatFileSize(result.file),
                          style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 14,
                            color: CupertinoColors.secondaryLabel,
                          ),
                        ),
                        
                        Text(
                          ' • ${_formatUploadTime(result.uploadTime)}',
                          style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 14,
                            color: CupertinoColors.secondaryLabel,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              
              // 状态指示器
              _buildStatusBadge(result),
            ],
          ),
          
          // 错误信息
          if (!result.success && result.errorMessage != null) ...[
            const SizedBox(height: 12),
            _buildErrorMessage(result.errorMessage!),
          ],
        ],
      ),
    );
  }

  Widget _buildStatusBadge(UploadResult result) {
    if (result.success) {
      return Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        decoration: BoxDecoration(
          color: CupertinoColors.systemGreen.withValues(alpha: 0.1),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(
              CupertinoIcons.checkmark,
              size: 12,
              color: CupertinoColors.systemGreen,
            ),
            const SizedBox(width: 4),
            Text(
              '成功',
              style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
                fontSize: 12,
                fontWeight: FontWeight.w500,
                color: CupertinoColors.systemGreen,
              ),
            ),
          ],
        ),
      );
    } else {
      return Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
        decoration: BoxDecoration(
          color: CupertinoColors.systemRed.withValues(alpha: 0.1),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(
              CupertinoIcons.xmark,
              size: 12,
              color: CupertinoColors.systemRed,
            ),
            const SizedBox(width: 4),
            Text(
              '失败',
              style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
                fontSize: 12,
                fontWeight: FontWeight.w500,
                color: CupertinoColors.systemRed,
              ),
            ),
          ],
        ),
      );
    }
  }

  Widget _buildErrorMessage(String errorMessage) {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: CupertinoColors.systemRed.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          const Icon(
            CupertinoIcons.info_circle_fill,
            size: 16,
            color: CupertinoColors.systemRed,
          ),
          
          const SizedBox(width: 8),
          
          Expanded(
            child: Text(
              errorMessage,
              style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 14,
                color: CupertinoColors.systemRed,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildActionButtons(bool hasFailures) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: Column(
        children: [
          // 重试失败按钮（如果有失败）
          if (hasFailures && widget.onRetryFailed != null) ...[
            SizedBox(
              width: double.infinity,
              child: CupertinoButton.filled(
                onPressed: () {
                  HapticFeedback.lightImpact();
                  widget.onRetryFailed?.call();
                },
                borderRadius: BorderRadius.circular(12),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Icon(
                      CupertinoIcons.refresh,
                      size: 18,
                      color: CupertinoColors.white,
                    ),
                    const SizedBox(width: 8),
                    Text(
                      '重试失败',
                      style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: CupertinoColors.white,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 12),
          ],
          
          // 继续上传按钮
          SizedBox(
            width: double.infinity,
            child: CupertinoButton(
              onPressed: () {
                HapticFeedback.lightImpact();
                widget.onUploadMore?.call();
              },
              color: hasFailures 
                ? CupertinoColors.systemGrey5 
                : CupertinoColors.systemBlue,
              borderRadius: BorderRadius.circular(12),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Icon(
                    CupertinoIcons.plus,
                    size: 18,
                    color: hasFailures 
                      ? CupertinoColors.label 
                      : CupertinoColors.white,
                  ),
                  const SizedBox(width: 8),
                  Text(
                    '继续上传',
                    style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: hasFailures 
                        ? CupertinoColors.label 
                        : CupertinoColors.white,
                    ),
                  ),
                ],
              ),
            ),
          ),
          
          // 完成按钮
          if (widget.onClose != null) ...[
            const SizedBox(height: 12),
            
            SizedBox(
              width: double.infinity,
              child: CupertinoButton(
                onPressed: () {
                  HapticFeedback.lightImpact();
                  widget.onClose?.call();
                },
                color: CupertinoColors.systemGrey6,
                borderRadius: BorderRadius.circular(12),
                child: Text(
                  '完成',
                  style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(
              fontSize: 16,
                    fontWeight: FontWeight.w500,
                    color: CupertinoColors.label,
                  ),
                ),
              ),
            ),
          ],
        ],
      ),
    );
  }

  String _buildSummaryText(int successCount, int failedCount) {
    if (failedCount > 0) {
      return '成功上传 $successCount 个文件，$failedCount 个文件上传失败。\n您可以重试失败的文件或继续上传新文件。';
    } else {
      return '全部 $successCount 个文件上传成功！\n发票信息已保存并可在发票管理中查看。';
    }
  }

  String _formatFileSize(File file) {
    try {
      final bytes = file.lengthSync();
      if (bytes < 1024) {
        return '${bytes}B';
      } else if (bytes < 1024 * 1024) {
        return '${(bytes / 1024).toStringAsFixed(1)}KB';
      } else {
        return '${(bytes / (1024 * 1024)).toStringAsFixed(1)}MB';
      }
    } catch (e) {
      return '未知大小';
    }
  }

  String _formatUploadTime(DateTime uploadTime) {
    final now = DateTime.now();
    final difference = now.difference(uploadTime);
    
    if (difference.inSeconds < 60) {
      return '刚刚';
    } else if (difference.inMinutes < 60) {
      return '${difference.inMinutes}分钟前';
    } else if (difference.inHours < 24) {
      return '${difference.inHours}小时前';
    } else {
      return '${uploadTime.month}月${uploadTime.day}日';
    }
  }

  bool _isImageFile(String path) {
    final ext = path.toLowerCase().split('.').last;
    return ['jpg', 'jpeg', 'png', 'webp'].contains(ext);
  }
}