name: 🐳 Docker Build & Deploy

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
      - '.github/workflows/docker-build.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Custom image tag (optional)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/invoice-assistant-frontend

jobs:
  # 构建性能分析
  build-info:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
      environment: ${{ steps.env.outputs.environment }}
      image-tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        run: |
          if git diff HEAD~1 --name-only | grep -E '^frontend/' > /dev/null; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Generate image tag
        id: tag
        run: |
          if [[ "${{ github.event.inputs.image_tag }}" != "" ]]; then
            echo "tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "tag=v$(date +%Y%m%d)-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          else
            echo "tag=dev-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    needs: build-info
    if: needs.build-info.outputs.should-deploy == 'true'
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Run tests (if available)
        run: |
          if npm run --silent test --dry-run 2>/dev/null; then
            npm run test
          else
            echo "No tests configured, skipping..."
          fi
        continue-on-error: true

  # Docker 构建和推送
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-info, code-quality]
    if: needs.build-info.outputs.should-deploy == 'true'
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Docker Buildx 设置（支持多平台构建）
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      # 登录到 GitHub Container Registry
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 提取元数据
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ needs.build-info.outputs.image-tag }}
            type=raw,value=latest,enable={{is_default_branch}}

      # 构建和推送 Docker 镜像（使用高级缓存）
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_MODE=${{ needs.build-info.outputs.environment }}
          # 高级缓存策略
          cache-from: |
            type=gha,scope=${{ github.workflow }}-${{ needs.build-info.outputs.environment }}
            type=gha,scope=${{ github.workflow }}-main
          cache-to: |
            type=gha,mode=max,scope=${{ github.workflow }}-${{ needs.build-info.outputs.environment }}
          # 构建优化
          outputs: |
            type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push=true
            type=docker,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},dest=/tmp/image.tar

      # 上传构建产物（用于后续部署）
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ needs.build-info.outputs.image-tag }}
          path: /tmp/image.tar
          retention-days: 7

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-info, docker-build]
    if: needs.build-info.outputs.should-deploy == 'true'
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 使用 Trivy 进行容器安全扫描
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-info.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      # 上传安全扫描结果到 GitHub Security
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 部署到测试环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-info, docker-build, security-scan]
    if: |
      needs.build-info.outputs.should-deploy == 'true' && 
      (needs.build-info.outputs.environment == 'staging' || github.event_name == 'pull_request')
    environment: staging
    steps:
      - name: Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-info.outputs.image-tag }}"
          # 这里添加实际的部署逻辑
          # 例如：更新 Kubernetes deployment，通知部署服务等

      - name: Health Check
        run: |
          echo "🔍 Running health checks..."
          # 添加健康检查逻辑

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-info, docker-build, security-scan]
    if: |
      needs.build-info.outputs.should-deploy == 'true' && 
      needs.build-info.outputs.environment == 'production' &&
      github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Create deployment issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚀 Production Deployment - ${{ needs.build-info.outputs.image-tag }}`,
              body: `
              ## Deployment Information
              - **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-info.outputs.image-tag }}\`
              - **Commit**: \`${{ github.sha }}\`
              - **Triggered by**: @${{ github.actor }}
              - **Workflow**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ## Pre-deployment Checklist
              - [ ] All tests passed
              - [ ] Security scan completed
              - [ ] Database migrations ready (if any)
              - [ ] Monitoring alerts configured
              
              Please review and approve for production deployment.
              `,
              labels: ['deployment', 'production']
            })

      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-info.outputs.image-tag }}"
          # 这里添加实际的生产部署逻辑

  # 构建报告
  build-report:
    runs-on: ubuntu-latest
    needs: [build-info, docker-build, deploy-staging, deploy-production]
    if: always() && needs.build-info.outputs.should-deploy == 'true'
    steps:
      - name: Generate build report
        run: |
          cat << EOF > build-report.md
          # 🐳 Docker Build Report
          
          ## Build Information
          - **Environment**: ${{ needs.build-info.outputs.environment }}
          - **Image Tag**: ${{ needs.build-info.outputs.image-tag }}
          - **Commit**: \`${{ github.sha }}\`
          - **Branch**: \`${{ github.ref_name }}\`
          
          ## Build Status
          - **Docker Build**: ${{ needs.docker-build.result == 'success' && '✅ Success' || '❌ Failed' }}
          - **Security Scan**: ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }}
          - **Staging Deploy**: ${{ needs.deploy-staging.result == 'success' && '✅ Success' || needs.deploy-staging.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
          - **Production Deploy**: ${{ needs.deploy-production.result == 'success' && '✅ Success' || needs.deploy-production.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}
          
          ## Image Details
          - **Registry**: ${{ env.REGISTRY }}
          - **Repository**: ${{ env.IMAGE_NAME }}
          - **Digest**: ${{ needs.docker-build.outputs.image-digest }}
          
          ---
          Generated by GitHub Actions 🤖
          EOF

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: build-report-${{ github.run_id }}
          path: build-report.md